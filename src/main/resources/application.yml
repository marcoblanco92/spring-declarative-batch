bulk:
  batch-properties:
    jdbc:
      platform: postgresql
      initialize-schema: never
      table-prefix: BATCH_
  datasources:
    b_declarative:
      main: true
      url: jdbc:postgresql://localhost:5432/b_declarative
      username: marbl_u
      password: marbl_p
      type: POSTGRES
      driver-class-name: org.postgresql.Driver

  batch-job:
    name: pocJob
    steps:
      - name: pocStep
        chunk: 10
        reader:                 # Reader lato step
          name: pocFileReader
          type: FlatFileItemReader
          config:
            resource: file:src/main/resources/poc/PocFileToRead.csv
            lineToSkip: 1
            fieldNames: [id, name, surname, email, transaction, status, creationDate]
            mappedClass: com.marbl.declarative_batct.spring_declarative_batch.poc.model.UserCsv
        processor:
          name: pocProcessor
          type: ItemProcessor
        writer:
          name: pocCascadeInsert
          type: JdbcBatchItemWriter
          config:
            datasource: b_declarative
            sql: |
              WITH upsert_cliente AS (
              INSERT INTO tb_poc_cliente (nome, cognome, email)
              VALUES (?, ?, ?)
              ON CONFLICT (email) DO NOTHING
              RETURNING id_cliente
              )
              INSERT INTO tb_poc_transazione (id_cliente, importo, stato, data_creazione)
              VALUES (
              COALESCE(
              (SELECT id_cliente FROM upsert_cliente),
              (SELECT id_cliente FROM tb_poc_cliente WHERE email = ?)
              ),
              ?,
              ?,
              ?
              );
            preparedStatementClass: com.marbl.declarative_batct.spring_declarative_batch.poc.statement.UserTransactionPreparedStatementSetter
        listeners:
          - type: StepExecutionListener
            name: pocStep


